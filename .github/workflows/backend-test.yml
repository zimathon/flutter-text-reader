name: Backend Tests

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-test.yml'
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-test.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run linting
        run: |
          cd backend
          pip install flake8 black mypy
          # Check code formatting
          black --check .
          # Run flake8 linter
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Type checking (optional, may need configuration)
          # mypy . --ignore-missing-imports
      
      - name: Run tests with coverage
        env:
          REDIS_URL: redis://localhost:6379
          GOOGLE_APPLICATION_CREDENTIALS: ""
        run: |
          cd backend
          pytest -v --cov=. --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t vibevoice-api:test ./backend
      
      - name: Test Docker image
        run: |
          docker run --rm vibevoice-api:test python -c "import main; print('Import successful')"